/*----------------------------------------------------------------------------*/
/* Copyright (c) 2019 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/
/*
package frc.robot.commands.LimelightCommands;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Framework.LookupTable;
import frc.robot.subsystems.Flywheel;
import frc.robot.subsystems.Limelight;

public class shootWithLimelight extends CommandBase {
  
  Flywheel m_flywheel;
  Limelight m_limelight;
  int setpoint;
  double thor;
  LookupTable tableOfPoints;
  //Need to test and insert points here
  double[] inputs = {};
  double[] outputs = {};
  public shootWithLimelight(Flywheel f, Limelight l) {
    // Use addRequirements() here to declare subsystem dependencies.
    m_flywheel = f;
    m_limelight = l;
    addRequirements(f);
    try {
      tableOfPoints = new LookupTable(inputs, outputs);
    } catch (Exception e) {
      // TODO Auto-generated catch block  
      e.printStackTrace();
    }
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {
    SmartDashboard.putNumber("setpoint", setpoint);
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    thor = m_limelight.getThor();
    setpoint = (int)tableOfPoints.get(thor);
    SmartDashboard.putNumber("setpoint generated by table", setpoint);
    m_flywheel.setSpeed(setpoint);
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {
  }

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }
}*/